{"ast":null,"code":"var _jsxFileName = \"C:\\\\Project Zero\\\\client\\\\src\\\\contexts\\\\PostContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useContext, useEffect, useMemo, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { useAsync } from \"../hooks/useAsync\";\nimport { getPost } from \"../services/posts\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Context = /*#__PURE__*/React.createContext();\nexport function usePost() {\n  _s();\n  return useContext(Context);\n}\n_s(usePost, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport function PostProvider({\n  children\n}) {\n  _s2();\n  const {\n    id\n  } = useParams();\n  const {\n    loading,\n    error,\n    value: post\n  } = useAsync(() => getPost(id), [id]);\n  const [comments, setComments] = useState([]);\n  const commentsByParentsId = useMemo(() => {\n    const group = {};\n    comments.forEach(comment => {\n      group[comment.parentId] ||= [];\n      group[comment.parentId].push(comment);\n    });\n    return group;\n  }, [comments]);\n  useEffect(() => {\n    if ((post === null || post === void 0 ? void 0 : post.comments) == null) return;\n    setComments(post.comments);\n  }, [post === null || post === void 0 ? void 0 : post.comments]);\n  function getReplies(parentId) {\n    return commentsByParentsId[parentId];\n  }\n  function createLocalComment(comment) {\n    setComments(prevComments => {\n      return [comment, ...prevComments];\n    });\n  }\n  function updateLocalComment(id, message) {\n    setComments(prevComments => {\n      return prevComments.map(comment => {\n        if (comment.id === id) {\n          return {\n            ...comment,\n            message\n          };\n        } else {\n          return comment;\n        }\n      });\n    });\n  }\n  return /*#__PURE__*/_jsxDEV(Context.Provider, {\n    value: {\n      post: {\n        id,\n        ...post\n      },\n      rootComments: commentsByParentsId[null],\n      getReplies,\n      createLocalComment,\n      updateLocalComment\n    },\n    children: loading ? /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Loading\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 17\n    }, this) : error ? /*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"error-msg\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 17\n    }, this) : children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 9\n  }, this);\n}\n_s2(PostProvider, \"7kYuK+swyhOF13iANBemLO7a0fw=\", false, function () {\n  return [useParams, useAsync];\n});\n_c = PostProvider;\nvar _c;\n$RefreshReg$(_c, \"PostProvider\");","map":{"version":3,"names":["React","useContext","useEffect","useMemo","useState","useParams","useAsync","getPost","jsxDEV","_jsxDEV","Context","createContext","usePost","_s","PostProvider","children","_s2","id","loading","error","value","post","comments","setComments","commentsByParentsId","group","forEach","comment","parentId","push","getReplies","createLocalComment","prevComments","updateLocalComment","message","map","Provider","rootComments","fileName","_jsxFileName","lineNumber","columnNumber","className","_c","$RefreshReg$"],"sources":["C:/Project Zero/client/src/contexts/PostContext.js"],"sourcesContent":["import React, { useContext, useEffect, useMemo, useState } from \"react\"\r\nimport { useParams } from \"react-router-dom\"\r\nimport { useAsync } from \"../hooks/useAsync\"\r\nimport { getPost } from \"../services/posts\"\r\n\r\nconst Context = React.createContext()\r\n\r\nexport function usePost() {\r\n    return useContext(Context)\r\n}\r\n\r\nexport function PostProvider({ children }) {\r\n    const { id } = useParams()\r\n    const { loading, error, value: post } = useAsync(() => getPost(id), [id])\r\n    const [comments, setComments] = useState([])\r\n    const commentsByParentsId = useMemo(() => {\r\n        const group = {}\r\n        comments.forEach(comment => {\r\n            group[comment.parentId] ||= []\r\n            group[comment.parentId].push(comment)\r\n        })\r\n        return group\r\n    }, [comments])\r\n\r\n    useEffect(() => {\r\n        if (post?.comments == null) return\r\n        setComments(post.comments)\r\n    }, [post?.comments])\r\n\r\n    function getReplies(parentId) {\r\n        return commentsByParentsId[parentId]\r\n    }\r\n\r\n    function createLocalComment(comment) {\r\n        setComments(prevComments => {\r\n            return [comment, ...prevComments]\r\n        })\r\n    }\r\n\r\n    function updateLocalComment(id, message) {\r\n        setComments(prevComments => {\r\n            return prevComments.map(comment => {\r\n                if (comment.id === id) {\r\n                    return { ...comment, message }\r\n                } else {\r\n                    return comment\r\n                }\r\n            })\r\n        })\r\n    }\r\n\r\n    return (\r\n        <Context.Provider value={{\r\n            post: { id, ...post },\r\n            rootComments: commentsByParentsId[null],\r\n            getReplies,\r\n            createLocalComment,\r\n            updateLocalComment\r\n        }}>\r\n            {loading ? (\r\n                <h1>Loading</h1>\r\n            ) : error ? (\r\n                <h1 className=\"error-msg\">{error}</h1>\r\n            ) : (\r\n                children\r\n            )}\r\n        </Context.Provider>\r\n    )\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}